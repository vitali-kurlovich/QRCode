//
//  QRDataTest.swift
//  QRCode GeneratorTests
//
//  Created by Vitali Kurlovich on 11/12/17.
//  Copyright © 2017 Vitali Kurlovich. All rights reserved.
//

import XCTest

class QRDataTest: XCTestCase {
	
	func testNumberData_1() {
		let number = QRNumber("45098124")
		XCTAssertEqual(number.lenght, 8)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 27)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
		XCTAssertTrue(buffer[10])
		XCTAssertTrue(buffer[11])
		XCTAssertTrue(buffer[12])
		XCTAssertTrue(buffer[13])
		XCTAssertFalse(buffer[14])
		XCTAssertTrue(buffer[15])
		XCTAssertFalse(buffer[16])
		XCTAssertTrue(buffer[17])
		XCTAssertFalse(buffer[18])
		XCTAssertTrue(buffer[19])
		XCTAssertFalse(buffer[20])
		XCTAssertFalse(buffer[21])
		XCTAssertTrue(buffer[22])
		XCTAssertTrue(buffer[23])
		XCTAssertFalse(buffer[24])
		XCTAssertFalse(buffer[25])
		XCTAssertFalse(buffer[26])
	}
	
	func testNumberData_2() {
		let number = QRNumber("4509812")
		XCTAssertEqual(number.lenght, 7)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 24)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
		XCTAssertTrue(buffer[10])
		XCTAssertTrue(buffer[11])
		XCTAssertTrue(buffer[12])
		XCTAssertTrue(buffer[13])
		XCTAssertFalse(buffer[14])
		XCTAssertTrue(buffer[15])
		XCTAssertFalse(buffer[16])
		XCTAssertTrue(buffer[17])
		XCTAssertFalse(buffer[18])
		XCTAssertTrue(buffer[19])
		XCTAssertFalse(buffer[20])
		XCTAssertFalse(buffer[21])
		XCTAssertTrue(buffer[22])
		XCTAssertFalse(buffer[23])
	}
	
	func testNumberData_3() {
		let number = QRNumber("450981")
		XCTAssertEqual(number.lenght, 6)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 20)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
		XCTAssertTrue(buffer[10])
		XCTAssertTrue(buffer[11])
		XCTAssertTrue(buffer[12])
		XCTAssertTrue(buffer[13])
		XCTAssertFalse(buffer[14])
		XCTAssertTrue(buffer[15])
		XCTAssertFalse(buffer[16])
		XCTAssertTrue(buffer[17])
		XCTAssertFalse(buffer[18])
		XCTAssertTrue(buffer[19])
	}
	
	func testNumberData_4() {
		let number = QRNumber("450")
		XCTAssertEqual(number.lenght, 3)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 10)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
	}
	
	func testNumberData_5() {
		let number = QRNumber("45")
		XCTAssertEqual(number.lenght, 2)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 7)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertFalse(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertTrue(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertTrue(buffer[6])
	}
	
	func testNumberData_6() {
		let number = QRNumber("4")
		XCTAssertEqual(number.lenght, 1)
		
		var buffer = QRBitBuffer()
		number.write(&buffer)
		
		XCTAssertEqual(buffer.count, 4)
		XCTAssertFalse(buffer[0])
		XCTAssertTrue(buffer[1])
		XCTAssertFalse(buffer[2])
		XCTAssertFalse(buffer[3])
	}
	
	func testAlphaNumberData_1() {
		
		let alpha = QRAlphaNum("ABC")
		XCTAssertEqual(alpha.lenght, 3)
		
		var buffer = QRBitBuffer()
		alpha.write(&buffer)
		
		XCTAssertEqual(buffer.count, 17)
		
		XCTAssertFalse(buffer[0])
		XCTAssertFalse(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertTrue(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertTrue(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
		XCTAssertTrue(buffer[10])
		XCTAssertFalse(buffer[11])
		XCTAssertFalse(buffer[12])
		XCTAssertTrue(buffer[13])
		XCTAssertTrue(buffer[14])
		XCTAssertFalse(buffer[15])
		XCTAssertFalse(buffer[16])
	}
	
	func testAlphaNumberData_2() {
		
		let alpha = QRAlphaNum("ABC0123ZY+*/%.- .:$%9")
		XCTAssertEqual(alpha.lenght, 21)
		
		var buffer = QRBitBuffer()
		alpha.write(&buffer)
		
		XCTAssertEqual(buffer.count, 116)
		
		XCTAssertFalse(buffer[0])
		XCTAssertFalse(buffer[1])
		XCTAssertTrue(buffer[2])
		XCTAssertTrue(buffer[3])
		XCTAssertTrue(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertTrue(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertFalse(buffer[9])
		XCTAssertTrue(buffer[10])
		XCTAssertFalse(buffer[11])
		XCTAssertTrue(buffer[12])
		XCTAssertFalse(buffer[13])
		XCTAssertFalse(buffer[14])
		XCTAssertFalse(buffer[15])
		XCTAssertFalse(buffer[16])
		XCTAssertTrue(buffer[17])
		XCTAssertTrue(buffer[18])
		XCTAssertTrue(buffer[19])
		XCTAssertFalse(buffer[20])
		XCTAssertFalse(buffer[21])
		XCTAssertFalse(buffer[22])
		XCTAssertFalse(buffer[23])
		XCTAssertFalse(buffer[24])
		XCTAssertFalse(buffer[25])
		XCTAssertFalse(buffer[26])
		XCTAssertTrue(buffer[27])
		XCTAssertFalse(buffer[28])
		XCTAssertTrue(buffer[29])
		XCTAssertTrue(buffer[30])
		XCTAssertTrue(buffer[31])
		XCTAssertTrue(buffer[32])
		XCTAssertFalse(buffer[33])
		XCTAssertFalse(buffer[34])
		XCTAssertFalse(buffer[35])
		XCTAssertTrue(buffer[36])
		XCTAssertFalse(buffer[37])
		XCTAssertTrue(buffer[38])
		XCTAssertFalse(buffer[39])
		XCTAssertTrue(buffer[40])
		XCTAssertFalse(buffer[41])
		XCTAssertTrue(buffer[42])
		XCTAssertFalse(buffer[43])
		XCTAssertTrue(buffer[44])
		XCTAssertTrue(buffer[45])
		XCTAssertFalse(buffer[46])
		XCTAssertFalse(buffer[47])
		XCTAssertFalse(buffer[48])
		XCTAssertTrue(buffer[49])
		XCTAssertFalse(buffer[50])
		XCTAssertFalse(buffer[51])
		XCTAssertFalse(buffer[52])
		XCTAssertTrue(buffer[53])
		XCTAssertFalse(buffer[54])
		XCTAssertTrue(buffer[55])
		XCTAssertTrue(buffer[56])
		XCTAssertTrue(buffer[57])
		XCTAssertFalse(buffer[58])
		XCTAssertFalse(buffer[59])
		XCTAssertFalse(buffer[60])
		XCTAssertFalse(buffer[61])
		XCTAssertFalse(buffer[62])
		XCTAssertTrue(buffer[63])
		XCTAssertTrue(buffer[64])
		XCTAssertFalse(buffer[65])
		XCTAssertTrue(buffer[66])
		XCTAssertTrue(buffer[67])
		XCTAssertFalse(buffer[68])
		XCTAssertTrue(buffer[69])
		XCTAssertTrue(buffer[70])
		XCTAssertFalse(buffer[71])
		XCTAssertTrue(buffer[72])
		XCTAssertTrue(buffer[73])
		XCTAssertFalse(buffer[74])
		XCTAssertFalse(buffer[75])
		XCTAssertFalse(buffer[76])
		XCTAssertTrue(buffer[77])
		XCTAssertTrue(buffer[78])
		XCTAssertTrue(buffer[79])
		XCTAssertFalse(buffer[80])
		XCTAssertTrue(buffer[81])
		XCTAssertFalse(buffer[82])
		XCTAssertTrue(buffer[83])
		XCTAssertTrue(buffer[84])
		XCTAssertFalse(buffer[85])
		XCTAssertFalse(buffer[86])
		XCTAssertTrue(buffer[87])
		XCTAssertTrue(buffer[88])
		XCTAssertTrue(buffer[89])
		XCTAssertTrue(buffer[90])
		XCTAssertTrue(buffer[91])
		XCTAssertFalse(buffer[92])
		XCTAssertFalse(buffer[93])
		XCTAssertFalse(buffer[94])
		XCTAssertTrue(buffer[95])
		XCTAssertTrue(buffer[96])
		XCTAssertTrue(buffer[97])
		XCTAssertFalse(buffer[98])
		XCTAssertTrue(buffer[99])
		XCTAssertTrue(buffer[100])
		XCTAssertFalse(buffer[101])
		XCTAssertTrue(buffer[102])
		XCTAssertFalse(buffer[103])
		XCTAssertTrue(buffer[104])
		XCTAssertFalse(buffer[105])
		XCTAssertFalse(buffer[106])
		XCTAssertTrue(buffer[107])
		XCTAssertTrue(buffer[108])
		XCTAssertTrue(buffer[109])
		XCTAssertFalse(buffer[110])
		XCTAssertFalse(buffer[111])
		XCTAssertTrue(buffer[112])
		XCTAssertFalse(buffer[113])
		XCTAssertFalse(buffer[114])
		XCTAssertTrue(buffer[115])
	}
	
	func testKanjiData_1() {
		
		let kanji = QRKanji("々ぁァ字")
		XCTAssertEqual(kanji.lenght, 4)
		
		var buffer = QRBitBuffer()
		kanji.write(&buffer)
		
		XCTAssertEqual(buffer.count, 52)
		
		XCTAssertFalse(buffer[0])
		XCTAssertFalse(buffer[1])
		XCTAssertFalse(buffer[2])
		XCTAssertFalse(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertFalse(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertTrue(buffer[8])
		XCTAssertTrue(buffer[9])
		XCTAssertFalse(buffer[10])
		XCTAssertFalse(buffer[11])
		XCTAssertFalse(buffer[12])
		XCTAssertFalse(buffer[13])
		XCTAssertFalse(buffer[14])
		XCTAssertFalse(buffer[15])
		XCTAssertFalse(buffer[16])
		XCTAssertTrue(buffer[17])
		XCTAssertFalse(buffer[18])
		XCTAssertFalse(buffer[19])
		XCTAssertFalse(buffer[20])
		XCTAssertTrue(buffer[21])
		XCTAssertTrue(buffer[22])
		XCTAssertTrue(buffer[23])
		XCTAssertTrue(buffer[24])
		XCTAssertTrue(buffer[25])
		XCTAssertFalse(buffer[26])
		XCTAssertFalse(buffer[27])
		XCTAssertFalse(buffer[28])
		XCTAssertFalse(buffer[29])
		XCTAssertTrue(buffer[30])
		XCTAssertTrue(buffer[31])
		XCTAssertFalse(buffer[32])
		XCTAssertFalse(buffer[33])
		XCTAssertFalse(buffer[34])
		XCTAssertFalse(buffer[35])
		XCTAssertFalse(buffer[36])
		XCTAssertFalse(buffer[37])
		XCTAssertFalse(buffer[38])
		XCTAssertFalse(buffer[39])
		XCTAssertTrue(buffer[40])
		XCTAssertFalse(buffer[41])
		XCTAssertTrue(buffer[42])
		XCTAssertFalse(buffer[43])
		XCTAssertFalse(buffer[44])
		XCTAssertFalse(buffer[45])
		XCTAssertFalse(buffer[46])
		XCTAssertTrue(buffer[47])
		XCTAssertTrue(buffer[48])
		XCTAssertFalse(buffer[49])
		XCTAssertTrue(buffer[50])
		XCTAssertFalse(buffer[51])
	}
	func test8BitData_1() {
		
		let bit = QR8BitByte("США")
		
		XCTAssertEqual(bit.lenght, 6)
		
		var buffer = QRBitBuffer()
		bit.write(&buffer)
		
		XCTAssertEqual(buffer.count, 48)
		
		XCTAssertTrue(buffer[0])
		XCTAssertFalse(buffer[1])
		XCTAssertFalse(buffer[2])
		XCTAssertFalse(buffer[3])
		XCTAssertFalse(buffer[4])
		XCTAssertTrue(buffer[5])
		XCTAssertFalse(buffer[6])
		XCTAssertFalse(buffer[7])
		XCTAssertFalse(buffer[8])
		XCTAssertTrue(buffer[9])
		XCTAssertFalse(buffer[10])
		XCTAssertTrue(buffer[11])
		XCTAssertFalse(buffer[12])
		XCTAssertFalse(buffer[13])
		XCTAssertTrue(buffer[14])
		XCTAssertFalse(buffer[15])
		XCTAssertTrue(buffer[16])
		XCTAssertFalse(buffer[17])
		XCTAssertFalse(buffer[18])
		XCTAssertFalse(buffer[19])
		XCTAssertFalse(buffer[20])
		XCTAssertTrue(buffer[21])
		XCTAssertFalse(buffer[22])
		XCTAssertFalse(buffer[23])
		XCTAssertFalse(buffer[24])
		XCTAssertTrue(buffer[25])
		XCTAssertFalse(buffer[26])
		XCTAssertTrue(buffer[27])
		XCTAssertTrue(buffer[28])
		XCTAssertFalse(buffer[29])
		XCTAssertFalse(buffer[30])
		XCTAssertTrue(buffer[31])
		XCTAssertTrue(buffer[32])
		XCTAssertFalse(buffer[33])
		XCTAssertFalse(buffer[34])
		XCTAssertFalse(buffer[35])
		XCTAssertFalse(buffer[36])
		XCTAssertTrue(buffer[37])
		XCTAssertFalse(buffer[38])
		XCTAssertFalse(buffer[39])
		XCTAssertFalse(buffer[40])
		XCTAssertTrue(buffer[41])
		XCTAssertFalse(buffer[42])
		XCTAssertFalse(buffer[43])
		XCTAssertFalse(buffer[44])
		XCTAssertFalse(buffer[45])
		XCTAssertFalse(buffer[46])
		XCTAssertFalse(buffer[47])
	}
}

